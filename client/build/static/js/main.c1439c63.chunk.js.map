{"version":3,"sources":["context/UserContext.js","components/auth/AuthOptions.js","components/layout/Header.js","components/pages/Home.js","components/misc/ErrorNotice.js","components/auth/Login.js","components/auth/Register.js","App.js","serviceWorker.js","index.js"],"names":["createContext","AuthOptions","useContext","UserContext","userData","setUserData","history","useHistory","className","user","onClick","token","undefined","localStorage","setItem","push","Header","id","to","Home","useEffect","ErrorNotice","props","message","clearError","Login","useState","email","setEmail","password","setPassword","error","setError","submit","e","a","preventDefault","loginUser","Axios","post","loginRes","data","response","msg","onSubmit","htmlFor","type","onChange","target","value","Register","passwordCheck","setpasswordCheckl","displayName","setDisplayName","newUser","placeholder","App","getItem","headers","get","userRes","checkLoggedIn","Provider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c1439c63.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport default createContext(null);","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport UserContext from '../../context/UserContext'\n\nexport default function AuthOptions() {\n    const { userData, setUserData } = useContext(UserContext);\n\n    const history = useHistory();\n\n    const register = () => history.push('/register');\n    const login = () => history.push('/login');\n    const logout = () => {\n        setUserData({\n            token: undefined,\n            user: undefined\n        });\n        localStorage.setItem('auth-token', '')\n    }\n\n    return (\n        <nav className='auth-options'>\n            {userData.user ? (<button onClick={logout}>Log out</button>) : (\n            <>\n                <button onClick={register}>Register</button>\n                <button onClick={login}>Log in</button>\n\n            </>\n            )}\n        </nav>\n    )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport AuthOptions from '../auth/AuthOptions'\n\nexport default function Header() {\n    return (\n        <header id='header'>\n            <Link to='/'>\n                <h1 className='title'>MERN auth app</h1>\n            </Link>\n\n            <AuthOptions />\n\n        </header>\n    )\n}\n","import React, { useEffect, useContext } from 'react';\nimport UserContext from '../../context/UserContext';\nimport { useHistory } from 'react-router-dom';\n\nfunction Home() {\n    const { userData } = useContext(UserContext);\n    const history = useHistory();\n\n    useEffect(() => {\n\n        if(!userData.user){\n            history.push('/login')\n        }\n\n    });\n    return (\n        <div className='page'>\n            Home\n        </div>\n    )\n}\n\nexport default Home\n\n","import React from 'react'\n\nexport default function ErrorNotice(props) {\n    return (\n        <div className='error-notice'>\n            <span>{props.message}</span>\n            <button onClick={props.clearError}>X</button>\n        </div>\n    )\n}\n","import React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\nimport Axios from 'axios';\nimport ErrorNotice from '../misc/ErrorNotice';\n\nexport default function Login() {\n    const [email, setEmail] = useState();\n    const [password, setPassword] = useState();\n    const [error, setError] = useState();\n\n    const { setUserData } = useContext(UserContext);\n    const history = useHistory();\n\n    const submit = async (e) => {\n        e.preventDefault();\n        try {\n            const loginUser = { email, password };\n            const loginRes = await Axios.post(\n                '/api/users/login',\n                loginUser\n            );\n\n            setUserData({\n                token: loginRes.data.token,\n                user: loginRes.data.user\n            });\n\n            localStorage.setItem('auth-token', loginRes.data.token);\n            history.push('/');\n        } catch (err) {\n            (err.response.data.msg && setError(err.response.data.msg))\n        }\n\n    }\n\n    return (\n        <div className='page'>\n            <h2>Login</h2>\n            {error && (\n                <ErrorNotice message={error} clearError={() => setError(undefined)} />\n            )}\n            <form className='form' onSubmit={submit}>\n                <label htmlFor='login-email'>Email</label>\n                <input\n                    id='login-email'\n                    type='email'\n                    onChange={e => setEmail(e.target.value)}\n                />\n\n                <label htmlFor='login-password'>Password</label>\n                <input\n                    id='login-password'\n                    type='password'\n                    onChange={e => setPassword(e.target.value)}\n                />\n\n                <input type='submit' value='Log in' />\n\n            </form>\n        </div>\n    )\n}\n","import React, { useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport UserContext from '../../context/UserContext';\nimport Axios from 'axios';\nimport ErrorNotice from '../misc/ErrorNotice';\n\nexport default function Register() {\n\n    const [email, setEmail] = useState();\n    const [password, setPassword] = useState();\n    const [passwordCheck, setpasswordCheckl] = useState();\n    const [displayName, setDisplayName] = useState();\n    const [error, setError] = useState();\n\n    const { setUserData } = useContext(UserContext);\n    const history = useHistory();\n\n    const submit = async (e) => {\n        e.preventDefault();\n        try {\n            const newUser = { email, password, passwordCheck, displayName };\n            await Axios.post(\n                '/api/users/register',\n                newUser\n            );\n            const loginRes = await Axios.post('/api/users/login', {\n                email,\n                password\n            });\n\n            setUserData({\n                token: loginRes.data.token,\n                user: loginRes.data.user\n            });\n\n            localStorage.setItem('auth-token', loginRes.data.token);\n            history.push('/');\n        } catch (err) {\n            err.response.data.msg && setError(err.response.data.msg);\n        }\n\n    }\n    return (\n        <div className='page'>\n            <h2>Register</h2>\n            {error && (\n                <ErrorNotice message={error} clearError={() => setError(undefined)} />\n            )}\n            <form className='form' onSubmit={submit}>\n                <label htmlFor='register-email'>Email</label>\n                <input\n                    id='register-email'\n                    type='email'\n                    onChange={e => setEmail(e.target.value)}\n                />\n\n                <label htmlFor='register-password'>Password</label>\n                <input\n                    id='register-password'\n                    type='password'\n                    onChange={e => setPassword(e.target.value)}\n                />\n                <input\n                    type='password'\n                    placeholder='Verify password'\n                    onChange={e => setpasswordCheckl(e.target.value)}\n                />\n\n                <label htmlFor='register-display-name'>Display name</label>\n                <input\n                    id='register-display-name'\n                    type='text'\n                    onChange={e => setDisplayName(e.target.value)}\n                />\n\n                <input type='submit' value='Register' />\n\n            </form>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Axios from 'axios';\nimport Header from './components/layout/Header'\nimport Home from './components/pages/Home.js';\nimport Login from './components/auth/Login.js';\nimport Register from './components/auth/Register.js';\nimport UserContext from './context/UserContext';\n\nimport './App.css';\n\nfunction App() {\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined\n  })\n\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      let token = localStorage.getItem(\"auth-token\");\n      if (token === null) {\n        localStorage.setItem('auth-token', '');\n        token = '';\n      }\n\n      const tokenRes = await Axios.post(\n        'http://localhost:5000/api/users/tokenIsValid',\n        null,\n        { headers: { 'x-auth-token': token } }\n      );\n      if (tokenRes.data) {\n        const userRes = await Axios.get('http://localhost:5000/api/users/', {\n          headers: { 'x-auth-token': token }\n        });\n        setUserData({\n          token,\n          user: userRes.data\n        })\n      }\n    };\n    checkLoggedIn();\n  }, [])\n\n  return (\n    <>\n      <BrowserRouter>\n        <UserContext.Provider value={{ userData, setUserData }}>\n          <Header />\n          <div className='container'>\n            <Switch>\n              <Route exact path='/' component={Home} />\n              <Route path='/login' component={Login} />\n              <Route path='/register' component={Register} />\n            </Switch>\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}